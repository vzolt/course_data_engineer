object App {

  def main(args: Array[String]): Unit = {
    import java.text.DecimalFormat
    /* 3a. Напишите программу, которая:
    i.     выводит фразу «Hello, Scala!» справа налево
    ii.     переводит всю фразу в нижний регистр
    iii.     удаляет символ!
    iv.     добавляет в конец фразы «and goodbye python!» */
    val x = "Hello, Scala!"
    println(x) // выводит фразу "Hello, Scala!"
    println(x.reverse) // выводит фразу «Hello, Scala!» справа налево
    println(x.toLowerCase()) // переводит всю фразу в нижний регистр
    println(x.dropRight(1)) // удаляет символ "!"
    println(x.dropRight(1) + " and goodbye Python!") // добавляет в конец фразы "and goodbye Python!"

    /* 3b. Напишите программу, которая вычисляет ежемесячный оклад сотрудника после вычета налогов.
    На вход вашей программе подается значение годового дохода до вычета налогов, размер премии –
    в процентах от годового дохода и компенсация питания. */
    val f = new DecimalFormat("##.##") // форматирование вывода чисел
    print("Введите значение годового дохода до вычета налогов, тыс.: ")
    val year_profit = scala.io.StdIn.readFloat() // ввод данных
    print("Введите размер премии – в процентах от годового дохода: ")
    val bonus = scala.io.StdIn.readFloat()
    print("Введите сумму компенсации за питание за год, тыс.: ")
    val compensation = scala.io.StdIn.readFloat()
    val month_profit = (((year_profit + bonus * year_profit * 0.01 + compensation) / 12) * 0.87).toFloat // расчет ежемесячного оклада
    println("Средний ежемесячный оклад сотрудника после вычета подоходного налогов, тыс.: " + f.format(month_profit)) // вывод с округлением до копеек

    /* 3c. Напишите программу, которая рассчитывает для каждого сотрудника отклонение (в процентах)
    от среднего значения оклада на уровень всего отдела.
    В итоговом значении должно учитываться в большую или меньшую сторону отклоняется размер оклада.
    На вход вышей программе подаются все значения, аналогичные предыдущей программе,
    а также список со значениями окладов сотрудников отдела 100, 150, 200, 80, 120, 75.  */
    var profits = List(100, 150, 200, 80, 120, 75)
    println("Исходные значения окладов сотрудников в отделе: " + profits)
    val profits_mean = profits.sum.toFloat / profits.size // среднее значение оклада
    var profit_diff = 0.0
    println("Средний оклад, тыс.: " + f.format(profits_mean))
    print("Отклонения размеров окладов от среднего, %: ")
    for (n <- profits) {profit_diff = (n - profits_mean) / profits_mean * 100 // расчет отклонения от среднего
    print(f.format(profit_diff) + " ") }
    println("")

    /* 3d. Попробуйте рассчитать новую зарплату сотрудника, добавив (или отняв, если сотрудник плохо себя вел)
    необходимую сумму с учетом результатов прошлого задания.
    Добавьте его зарплату в список и вычислите значение самой высокой зарплаты и самой низкой. */
    val bonus_diff = (month_profit/0.87 - profits_mean).abs // авсолютное значение
    println("Величина бонуса до вычета налога, тыс.: " + f.format(bonus_diff))
    print("Если добавить бонус введите - 'plus', отнять - введите 'minus', без изменения - 'любой символ': ")
    val approve = scala.io.StdIn.readLine()
    var month_profit_new = month_profit
    if (approve == "plus") { month_profit_new = (month_profit/0.87 + bonus_diff).toFloat }
    if (approve == "minus") { month_profit_new = (month_profit/0.87 - bonus_diff).toFloat}
    println("Оклад с учетом добавления / вычета бонуса до вычета налога, тыс: " + f.format(month_profit_new))
    profits = profits :+ month_profit_new.ceil.toInt // добавление в список
    val profits_min = profits.min
    val profits_max = profits.max
    println("Список после добавления зарплаты сотрудника: " +  profits)
    println("Минимальное и максимальное значения: " + profits_min + ", " + profits_max)

    /* 3e. Также в вашу команду пришли два специалиста с окладами 350 и 90 тысяч рублей.
    Попробуйте отсортировать список сотрудников по уровню оклада от меньшего к большему. */
    profits = (profits :+ 350 :+90).sorted // добавление в список и сортировка
    println("Список после добавления окладов в список и сортировки по уровню оклада: " + profits)

    /* 3f. Кажется, вы взяли в вашу команду еще одного сотрудника и предложили ему оклад 130 тысяч.
    Вычислите самостоятельно номер сотрудника в списке так, чтобы сортировка не нарушилась и добавьте его на это место. */
    var index = 1
    var done = false
    for (n <- profits) if (n<= 130 && !done) index += 1 else done = true // определение номера сотрудника
    println("Порядковый номер в списке сотрудника с окладом 130 тыс. будет равен: "+ index)
    profits = profits.patch(index-1, List(130), 0) // добавление по номеру в списке
    print("Список после добавления сотрудника: " + profits)
    println("")

    /* 3g. Попробуйте вывести номера сотрудников из полученного списка, которые попадают под категорию middle.
    На входе программе подается «вилка» зарплаты специалистов уровня middle. */
    print("Чему равна «вилка» зарплаты специалистов уровня middle? ")
    val middle = scala.io.StdIn.readFloat()
    index = 1
    println("Порядковые номера сотрудников (если такие есть) из полученного списка, которые попадают под категорию middle: ")
    for (n <- profits) if (n >= middle ) { print(index + " "); index += 1 } else index += 1 // вывод значений по условию
    println("")

    /* 3h. Однако наступил кризис и ваши сотрудники требуют повысить зарплату.
    Вам необходимо проиндексировать зарплату каждого сотрудника на уровень инфляции – 7% */
    println("Размер окладов после индексации на 7%: ")
    for (n <- profits) print((n*1.07).toFloat + " ") // расчет индексации

  }

}
